use std::str::FromStr;

use anyhow::ensure;
use ethers::prelude::*;
use near_light_client_rpc::{
    prelude::{CryptoHash, Itertools},
    TransactionOrReceiptId as TransactionOrReceiptIdPrimitive,
};
use plonky2x::{
    backend::{
        circuit::DefaultParameters,
        function::{BytesRequestData, ProofRequest, ProofRequestBase},
        prover::ProofId,
    },
    utils::hex,
};
use reqwest::header::{self, HeaderMap};
use reqwest_retry::{policies::ExponentialBackoff, RetryTransientMiddleware};
use serde::Deserialize;

use self::types::{Deployment, ProofResponse};
use crate::{config, rpc::VERIFY_ID_AMT, succinct::types::ProofRequestResponse};

pub mod types;

// TODO: actually need to make request through this otherwise can't get proofs
// relayed
abigen!(
    NearX,
    "../../nearx/contract/abi.json",
    derives(serde::Deserialize, serde::Serialize),
);

#[derive(Debug, Deserialize, Clone)]
pub struct Config {
    pub api_key: String,
    #[serde(default = "default_rpc")]
    pub rpc_url: String,
    pub eth_rpc_url: String,
    // TODO: ensure hex
    pub contract_address: Address,
    pub version: String,
    #[serde(default = "default_organisation")]
    pub organisation_id: String,
    #[serde(default = "default_project")]
    pub project_id: String,
}

fn default_rpc() -> String {
    "https://alpha.succinct.xyz/api".into()
}

fn default_organisation() -> String {
    "near".into()
}

fn default_project() -> String {
    "near-light-client".into()
}

#[derive(Clone, Debug)]
pub struct Client {
    config: Config,
    inner: reqwest_middleware::ClientWithMiddleware,
    contract: NearX<Provider<Http>>,
}

impl Client {
    pub fn new(config: &config::Config) -> Self {
        log::info!("starting succinct client");

        let provider = Provider::<Http>::try_from(&config.succinct.eth_rpc_url)
            .expect("could not connect to eth client");
        let contract = NearX::new(config.succinct.contract_address.0, provider.into());

        let mut headers = HeaderMap::new();
        let mut auth =
            header::HeaderValue::from_str(&format!("Bearer {}", config.succinct.api_key))
                .expect("invalid auth header");
        auth.set_sensitive(true);
        headers.insert(header::AUTHORIZATION, auth);

        let inner = reqwest::ClientBuilder::default()
            .timeout(std::time::Duration::from_secs(30)) // Long timeout to avoid spamming api
            .default_headers(headers)
            .build()
            .unwrap();

        let retry_policy = ExponentialBackoff::builder().build_with_max_retries(2);
        let inner = reqwest_middleware::ClientBuilder::new(inner)
            .with(RetryTransientMiddleware::new_with_policy(retry_policy))
            .build();

        Self {
            inner,
            contract,
            config: config.succinct.clone(),
        }
    }

    pub async fn send(&self, release_id: &str, data: BytesRequestData) -> anyhow::Result<ProofId> {
        let request = self.build_proof_request_bytes(release_id, data);
        let res = self
            .inner
            .post(format!("{}/proof/new", self.config.rpc_url))
            .json(&request)
            .send()
            .await?
            .error_for_status()?;
        let r: ProofRequestResponse = res.json().await?;
        Ok(r.proof_id)
    }

    pub async fn get(&self, proof_id: &ProofId) -> anyhow::Result<ProofResponse> {
        log::debug!("getting proof {}", proof_id.0);
        let res = self
            .inner
            .get(format!("{}/proof/{}", self.config.rpc_url, proof_id.0))
            .send()
            .await?
            .error_for_status()?;
        let r: ProofResponse = res.json().await?;
        Ok(r)
    }

    // TODO: cache this for a long time
    pub async fn fetch_deployments(&self) -> anyhow::Result<Vec<Deployment>> {
        log::debug!("getting deployments");
        let res = self
            .inner
            .get(format!(
                "{}/deployments/{}/{}",
                self.config.rpc_url, self.config.organisation_id, self.config.project_id
            ))
            .send()
            .await?
            .error_for_status()?;
        Ok(res.json().await?)
    }

    // TODO: cache this for a long time
    pub async fn fetch_release_details(&self) -> anyhow::Result<(Deployment, Deployment)> {
        log::debug!("getting release details");
        let deployments = self.fetch_deployments().await?;
        let releases = deployments
            .into_iter()
            .filter(|d| d.release_info.release.name.contains(&self.config.version))
            .collect_vec();

        let find = |entrypoint: &str| -> Deployment {
            releases
                .iter()
                .find(|r| r.release_info.release.entrypoint == entrypoint)
                .expect("could not find release for entrypoint {entrypoint}")
                .to_owned()
        };

        Ok((find("sync"), find("verify")))
    }

    pub fn build_proof_request_bytes(
        &self,
        release_id: &str,
        data: BytesRequestData,
    ) -> ProofRequest<DefaultParameters, 2> {
        log::trace!(
            "building proof request for {:?} with data {:?}",
            release_id,
            hex!(&data.input)
        );
        ProofRequest::<DefaultParameters, 2>::Bytes(ProofRequestBase {
            release_id: release_id.to_string(),
            parent_id: None,
            files: None,
            data,
        })
    }

    pub fn build_sync_request(&self, trusted_header_hash: CryptoHash) -> BytesRequestData {
        log::debug!("building sync request for {:?}", trusted_header_hash);
        BytesRequestData {
            input: trusted_header_hash.0.to_vec(),
        }
    }

    pub fn build_verify_request(
        &self,
        trusted_header_hash: CryptoHash,
        ids: Vec<TransactionOrReceiptIdPrimitive>,
    ) -> BytesRequestData {
        log::debug!("building verify request for {:?}", trusted_header_hash);
        log::trace!("ids {:?}", ids);
        BytesRequestData {
            // TODO: define this input by abi
            input: [
                trusted_header_hash.0.to_vec(),
                ethers::abi::encode_packed(
                    &ids.into_iter()
                        .map(TransactionOrReceiptId::from)
                        .flat_map(ethers::abi::Tokenize::into_tokens)
                        .collect_vec(),
                )
                .unwrap(),
            ]
            .concat(),
        }
    }

    pub async fn sync(&self) -> anyhow::Result<ProofId> {
        log::trace!("syncing");
        let (release, _) = self.fetch_release_details().await?;
        let req = self.build_sync_request(self.fetch_trusted_header_hash().await?);
        let proof_id = self.send(&release.release_info.release.id, req).await?;
        Ok(proof_id)
    }

    pub async fn verify(
        &self,
        ids: Vec<TransactionOrReceiptIdPrimitive>,
    ) -> anyhow::Result<ProofId> {
        log::trace!("verifying {} ids", ids.len());
        ensure!(
            ids.len() == VERIFY_ID_AMT,
            "wrong number of transactions for verify"
        );
        let (_, release) = self.fetch_release_details().await?;

        let req = self.build_verify_request(self.fetch_trusted_header_hash().await?, ids);
        let proof_id = self.send(&release.release_info.release.id, req).await?;
        Ok(proof_id)
    }

    // TODO: amortize these
    pub async fn fetch_trusted_header_hash(&self) -> anyhow::Result<CryptoHash> {
        Ok(self.contract.latest_header().await.map(CryptoHash)?)
    }
    pub async fn _fetch_sync_function_id(&self) -> anyhow::Result<[u8; 32]> {
        Ok(self.contract.sync_function_id().await?)
    }
    pub async fn _fetch_verify_function_id(&self) -> anyhow::Result<[u8; 32]> {
        Ok(self.contract.verify_function_id().await?)
    }
}

impl From<TransactionOrReceiptIdPrimitive> for TransactionOrReceiptId {
    fn from(value: TransactionOrReceiptIdPrimitive) -> Self {
        let (id, account, is_transaction) = match value {
            TransactionOrReceiptIdPrimitive::Transaction {
                transaction_hash,
                sender_id,
            } => (transaction_hash, sender_id, true),
            TransactionOrReceiptIdPrimitive::Receipt {
                receipt_id,
                receiver_id,
            } => (receipt_id, receiver_id, false),
        };
        TransactionOrReceiptId {
            id: id.0,
            account: near_light_client_protocol::config::pad_account_id(&account).into(),
            is_transaction,
        }
    }
}

#[cfg(test)]
mod tests {
    use test_utils::{fixture, testnet_state};

    use super::*;
    use crate::{config::Config, rpc::VERIFY_ID_AMT};

    #[test]
    fn test_can_build_sync() {
        let (header, _, _) = testnet_state();
        let hash = header.hash();

        let client: Client = Client::new(&Config::test_config());
        let sync_release_id = "1cde66c3-46df-4aab-8409-4cbb97abee1c".to_string();

        let req = client.build_sync_request(hash);
        assert_eq!(req.input, hash.0.to_vec());

        if let ProofRequest::Bytes(full) =
            client.build_proof_request_bytes(&sync_release_id, req.clone())
        {
            println!("{}", serde_json::to_string_pretty(&full).unwrap());

            assert_eq!(full.data.input, req.input);
            assert_eq!(full.parent_id, None);
            assert_eq!(full.files, None);
            assert_eq!(full.release_id, sync_release_id);
        } else {
            panic!("wrong request type");
        }
    }

    #[test]
    fn test_can_build_verify() {
        let (header, _, _) = testnet_state();
        let hash = header.hash();

        let client: Client = Client::new(&Config::test_config());
        let verify_release_id = "c35d498e-f283-4b14-a42f-3a35807d3a70".to_string();

        let txs = fixture::<Vec<TransactionOrReceiptIdPrimitive>>("ids.json")
            .into_iter()
            .take(VERIFY_ID_AMT)
            .collect_vec();

        let req = client.build_verify_request(hash, txs);
        assert_eq!(req.input[..32], hash.0.to_vec());
        // Not using the same as above because of the padding
        assert_eq!(hex!(&req.input[32..]), "");

        if let ProofRequest::Bytes(full) =
            client.build_proof_request_bytes(&verify_release_id, req.clone())
        {
            println!("{}", serde_json::to_string_pretty(&full).unwrap());

            assert_eq!(full.data.input, req.input);
            assert_eq!(full.parent_id, None);
            assert_eq!(full.files, None);
            assert_eq!(full.release_id, verify_release_id);
        } else {
            panic!("wrong request type");
        }
    }
}
